version: '3.7'
services:

  ## Postgresql Docker Compose Config
  postgres-user:
    container_name: postgres-user
    image: postgres
    environment:
#      POSTGRES URL
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always

  postgres-organization:
    container_name: postgres-organization
    image: postgres
    environment:
#   POSTGRES URL
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  postgres-user-organization:
    container_name: postgres-user-organization
    image: postgres
    environment:
# POSTGRES URL
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
#      SOME ENVIROMENT
    depends_on:
      - zipkin


  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  api-gateway:
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
#      SOME ENVIROMENT
    depends_on:
      - zipkin
      - discovery-server

  ## User-Service Docker Compose Config
  user-service:
    container_name: user-service
    environment:
# SOME ENV
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
      - postgres-user

  ## Organization-Service Docker Compose Config
  organization-service:
    container_name: organization-service
    environment:
#SOME ENV
    depends_on:
      - postgres-organization
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Organization-Service Docker Compose Config
  user-organization-service:
    container_name: user-organization-service
    environment:
# SOME ENV
    depends_on:
      - postgres-user-organization
      - broker
      - zipkin
      - discovery-server
      - api-gateway